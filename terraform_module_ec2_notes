Module development 
==================
Module will works on DRY principle --- Dont repeat yourself

Important points 
variables
functions

min code 
code reuse


write resource defintions
left side options are from documentation,you can't change options right side are values,
we can give as per project requirement 
keep variables and their default values 
override if required

resource defintion
------------------
resource "aws_instance" "" {
}

left side options
----------------
ami
instance_type 


So by using module concept we are creating ec2 instance 

first we are giving leftside values in resource
resource "aws_instance" "db" {
    ami = 
    instance_type = 
    vpc_security_group_ids = 
	tags = {
      
    }

Now we are creating variables for left side values

variable "ami_id" {
    type = string
    default = "ami-041e2ea9402c46c32"
  
}

variable "security_group_ids" {
    type = list
    default = ["sg-0d691bc690171d377"]
  
}
variable "instance_type" {
    #type = string      #dont mention type for instance_type, we will get an error
    default = "t3.micro"
  
}

variable "tags" {
    type = map 
    default = {} #this means empty, its not a mandatory 
  
}

so after creation of variables we assigning to the values to the resource

resource "aws_instance" "db" {
    ami = var.ami_id
    instance_type = var.instance_type
    vpc_security_group_ids = var.security_group_ids
    tags = var.tags
}

Note: providers.tf still we dint not use in this directory
we created resource and we defined variables

so we can create one more directory and we will create providers.tf 

code placed in one directory and we have to use the one more directory
we can called the code by using "module"
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "5.48.0"
    }
  }
  backend "s3" {
    bucket = "nag-devops1"
    key    = "module-ec2"     #we need to change the key value 
    region = "us-east-1"
    dynamodb_table = "nag-locking"
  }
}

#provide authentication here
provider "aws" {
  region = "us-east-1"
}

	
  
}


after that we can create file ec2.tf

we have to call the code by using module

module "ec2-test" {

#provide code directory to call the code , we can use the source command 

source = "../terraform-aws-ec2"
}

so we can run the terraform commands 

$ terraform init
Initializing modules...
- ec2-test in ..\terraform-aws-ec2

Initializing the backend...

Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.

Initializing provider plugins...
- Finding hashicorp/aws versions matching "5.48.0"...
- Installing hashicorp/aws v5.48.0...

once terraform init completed automatically "module" will be created 
in that "module.json" automatically created its contains the terraform code details 

so it will call the code and its will create the ec2 instance

if you want override default values 

module "aws-ec2" {

source = "../terraform-aws-ec2"
instance_type = "t3.small"  #its will override the t3.micro
tags = {
Name = "Module-test"
terraform = "true"
  }
}

advantages
-----------
code reuse 
best practices can be implemente and force to use 
easy to maintain/update
we can keep few restrictions based on company guidelines

module developers --- they create tf code with best practices
module users -- they can use the code 
 
module are two types
===================
1.custom module development
2.open source modules

VPC()
=======
virtual private cloud 
suppose we have a project
they have to buy the servers
deploy the code in servers
development ---- only dev servers
testing --- only qa servers
production support --- limited access for production servers 
call center --- only internal applications
devops --- full access to all servers 
linux admin -- all server access 

data center
==========
space
watchmen
network 
resources
maintanance 
logical seperation of servers
power

VPC
=====
VPC is a mini data center for a project.
resources created inside VPC are isolated and private to ourself

VPC name = village name 
VPC CIDR = village pincode 
subnets = streets 
arch = internet gateway 
routes = roads 

public and private subnets
----------------------------
subnets which are connected to internet gateway are called public subnets
subnets which are not connected to internet gateway are called private subnets

10.0.0.0/16 ------> first 2 digits are fixed, your are not allowed to change , you can change last 2 octate
10.0 -----> fixed 
each octate range -- 0-255 

10.0.1.0/24 -----> first 3 digits are fixed, you can change last octate 

10.0.2.0/24,10.0.3.0/24,10.0.3.0/24,


steps
=======
first we have to created VPC with CIDR ----10.0.0.0/24
based on VPC 
we have to create VPC subnets 
public subnets ---10.0.1.0/24 
private subnets ----- 10.0.11.0/24 

next we have to create internet gateway and attach internet gateway to VPC 

create route tables
public route table and attach VPC
private route table and attach VPC 

frontend ---- public
backend ----- private
db ------ private, we create in db subnet 

what is high availability zone 
------------------------------
suppose we have availability zones 1a,1b
suppose will 1a down ----1b be will available 

if two 1a,1b availability zones are up---the traffic will be moved to 1a,1b 

2 subnets ---> 1a and 1b 
2 private subnets ----> 1a and 1b 
2 db subnets --1a and 1b 

VPC
---
create VPC
create IGW 
attach IGW to VPC 
create subnet
create route table 
create routes 
attach route table subnet


create VPC
----------
VPC name --- expense-dev
create the VPC -----with CIDR  ----10.0.0.0./16 

IGW
----
create IGW ----with name expense --- and attach VPC to IGW 

create a subnet
================
subnet name --- expense--public-us-east-1a
availability zone ---1a
VPC CIDR ---10.0.0.0/16
subnet CIDR ---10.0.1.0/24

create one moresubnet for availability zone 1b 

subnet name --- expense--public-us-east-1b
availability zone ---1b
VPC CIDR ---10.0.0.0/16
subnet CIDR ---10.0.2.0/24

create subnet for private 

subnet name --- expense--private-us-east-1a
availability zone ---1a
VPC CIDR ---10.0.0.0/16
subnet CIDR ---10.0.11.0/24

create one moresubnet for availability zone 1b 

subnet name --- expense--private-us-east-1b
availability zone ---1b
VPC CIDR ---10.0.0.0/16
subnet CIDR ---10.0.12.0/24


create a subnet for database subnet

subnet name --- expense--database-us-east-1a
availability zone ---1a
VPC CIDR ---10.0.0.0/16
subnet CIDR ---10.0.21.0/24

create one moresubnet for availability zone 1b 

subnet name --- expense--database-us-east-1b
availability zone ---1b
VPC CIDR ---10.0.0.0/16
subnet CIDR ---10.0.22.0/24

create route tables
===================
name -- expense-public
select vpc 

so goto  expense-public route table --we should add 
edit route table --- add route data ---- 0.0.0.0/0 and give IGW 

create private route table 

create database route table 

next route table associate with subnets

goto "subnet" expense--public-us-east-1a-- and edit the subnet associations and give public route table 
same scenario for other subnets also 


NAT Gateway 
=============
private servers can't connect to the internet or cannot accept connections from the internet

yum nginx -y its not works

traffic originating from the servers --- outbound 
traffic to servers is called inbound 

NAT gateway -- public subnet 
this is enable outbound internet traffic to the private servers 
general use cases fetching the updates, downloading packages from the internet

IP keeps on changing, IP should not be changed. we need to static IP.
Elastic IP == static IP

NAT gateway its should be in public subnet

NAT gateway is only will take care of outbound rules
##what is NAT gateway or how can enable outbound internet traffic to the private servers 


resource names, variable names, output names these names are related to terraform

Name tags are related users 

terraform names can have "_" to seperate words 
user names can have "-" to seperate words 


vpc resource
==========
resource "aws_vpc" "main" {
  cidr_block       = var.vpc_cidr
  instance_tenancy = "default"
  enable_dns_hostnames = var.enable_dns_hostnames

  tags = {
    Name = "main"
  }
}

variables
=========
variable "vpc_cidr" {
    type = string
    default = "10.0.0.0/16"
  
}
variable "enable_dns_hostnames" {
    type = bool
    default = "true"
  
}

tagging strategy 
==================
expense-dev 
<project name>-<environment>
common tags 
----------
terraform = true
project name 
environment

we can also variables.tf in terraform module users [terraform-vpc-test]

IGW
====
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "main"
  }
}



resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = merge(
    var.common_tags,
    var.igw_tags,
    {
      Name = local.resource_name

    }
  )
  
}

create VPC 
create IGW 
create subnets (public/private/database)
we decided every project inside nagdevops.online should have high availability
so we should force to create 2 public/private/database subnets

expense-public-us-east-1a
expense-public-us-east-1b

resource "aws_subnet" "main" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "Main"
  }
}

we have to modify on this 
so we need to subnets so,we have to use count function
terraform variable conditions/restrictions
-----------------------------------------
Here we want exactly two subnets 
variable "public_subnet_cidrs" {
    type =list 
    validation {
      condition = length(var.public_subnet_cidrs) == 2
      error_message = "please provide exact 2 CIDRs values"
    }
  
}

variable conditions/restrictions
----------------------------------
 validation {
      condition = length(var.public_subnet_cidrs) == 2
      error_message = "please provide exact 2 CIDRs values"
    }
	
so we used this variable we created resource
resource "aws_subnet" "public" {
  count = length(var.public_subnet_cidrs)
  vpc_id     = aws_vpc.main.id
  cidr_block = var.public_subnet_cidrs[count.index]

  tags = {
    Name = "Main"
  }
}
	
tags 
======
expense-public-us-east-1a
expense-public-us-east-1b

for availability zones data we have source from provider so, we can use "data source"

How to identify How many availability zones in a region
---------------------------------------------------------
data "aws_availability_zones" "available" {
    state = "available"
}


we have to take outputs 

terraform developers output.tf 

output "azs" {
    value = data.aws_availability_zones.available
  
}

if you want only names 
output "azs" {
    value = data.aws_availability_zones.available.names
  
}

terraform users output.tf 
output "azs_info" {
    value = module.vpc.azs  #<module>.<modue name>.<output>
  
}


so we got the output
  + azs_info = [
      + "us-east-1a",
      + "us-east-1b",
      + "us-east-1c",
      + "us-east-1d",
      + "us-east-1e",
      + "us-east-1f",
    ]
here we want to take two availability zones only so, we are using slice function

slice(list, start_index, end_index)

list - The list from which you want to extract a subset.
start_index - The starting index of the subset (inclusive).
end_index - The ending index of the subset (exclusive).

slice(data.aws_availability_zones.available.names, 0, 2)

error 
=====
│ Error: Missing required argument
│
│   on vpc.tf line 1, in module "vpc":
│    1: module "vpc" {
│
│ The argument "public_subnet_cidrs" is required, but no definition was
│ found.


so we have to give in terraform users 
variable "public_subnet_cidrs" {
    default = ["10.0.1.0/24","10.0.2.0/24"]
  
}


module "vpc" {
    source = "../terraform-aws-vpc"
    project_name = var.project_name
    common_tags = var.common_tags
    public_subnet_cidrs = var.public_subnet_cidrs
}


we can create the same for private and database subnets 

NAT gateway / elastic IP
--------------------------
create elastic IP

resource "aws_eip" "lb" {
  domain   = "vpc"
}


resource "aws_nat_gateway" "example" {
  allocation_id = aws_eip.example.id
  subnet_id     = aws_subnet.example.id

  tags = {
    Name = "gw NAT"
  }

  # To ensure proper ordering, it is recommended to add an explicit dependency
  # on the Internet Gateway for the VPC.
  depends_on = [aws_internet_gateway.example]
}

route tables 
===========
resource "aws_route_table" "example" {
  vpc_id = aws_vpc.example.id

  route {
    cidr_block = "10.0.1.0/24"
    gateway_id = aws_internet_gateway.example.id
  }

  route {
    ipv6_cidr_block        = "::/0"
    egress_only_gateway_id = aws_egress_only_internet_gateway.example.id
  }

  tags = {
    Name = "example"
  }
}


But we are just route tables so we are using below resource

resource "aws_route_table" "example" {
  vpc_id = aws_vpc.example.id
  tags = {
    Name = "example"
  }
}


resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id
  tags = merge(
  var.common_tags,
  var.public_route_table_tags,
  {
    Name = "${local.resource_name}-public"
  }
 )
}

resource "aws_route_table" "private" {
  vpc_id = aws_vpc.main.id
  tags = merge(
  var.common_tags,
  var.private_route_table_tags,
  {
    Name = "${local.resource_name}-private"
  }
 )
}

## database route table 
resource "aws_route_table" "database" {
  vpc_id = aws_vpc.main.id
  tags = merge(
  var.common_tags,
  var.database_route_table_tags,
  {
    Name = "${local.resource_name}-database"
  }
 )
}

for the same we have to create same private and database

present we are not assigning subnets to the our route tables 


route 
=======
so we are creating routes 

resource "aws_route" "r" {
  route_table_id            = aws_route_table.testing.id
  destination_cidr_block    = "10.0.1.0/22"
  vpc_peering_connection_id = "pcx-45ff3dc1"
}

for public route
resource "aws_route" "public" {
  route_table_id            = aws_route_table.public.id
  destination_cidr_block    = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.gw.id
}

resource "aws_route" "private_route_nat" {
  destination_cidr_block    = "0.0.0.0/0"
  route_table_id            = aws_route_table.private.id
  nat_gateway_id = aws_nat_gateway.nat.id
}

resource "aws_route" "database_route_nat" {
  destination_cidr_block    = "0.0.0.0/0"
  route_table_id            = aws_route_table.database.id
  nat_gateway_id = aws_nat_gateway.nat.id
}

	
for private and database servers are connect with public through nat gateway

So now we are associationing subnets to the route table 
---------------------------------------------------------
we have 1 public route table 
and 2 public subnets 

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.foo.id
  route_table_id = aws_route_table.bar.id
}

resource "aws_route_table_association" "public" {
  count = length(var.public_subnet_cidrs)
  subnet_id      = aws_subnet.public[*].id
  route_table_id = aws_route_table.public.id
}

resource "aws_route_table_association" "private" {
  count = length(var.private_subnet_cidrs)
  subnet_id      = aws_subnet.private[*].id
  route_table_id = aws_route_table.private.id
}

resource "aws_route_table_association" "database" {
  count = length(var.database_subnet_cidrs)
  subnet_id      = aws_subnet.database[*].id
  route_table_id = aws_route_table.database.id
}

we will get an error 

Error: Incorrect attribute value type
│
│   on ..\terraform-aws-vpc\vpc.tf line 166, in resource "aws_route_table_association" "database":
│  166:   subnet_id      = aws_subnet.database[*].id
│     ├────────────────
│     │ aws_subnet.database is tuple with 2 elements
│
│ Inappropriate value for attribute "subnet_id": string required.
╵
Releasing state lock. This may take a few moments...

How to select a particular element from a list 
-------------------------------------------------
0th -- count.index 
1st --- count.index 





